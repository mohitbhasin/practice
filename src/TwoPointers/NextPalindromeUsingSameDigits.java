class NextPalindromeUsingSameDigits {
	public static void main(String args[]) {
		String[] numStrs = {"12321", "5", "23143034132", "1001", "473743080591539887212178929016813412892223396952517932470707552410997101035646098924542921759228426571052557988626347514059282992956328710571115929177946374081953756552944305699503127121290675447787725180728756953055629518410611951644397329149669974994719736513085303916606815871992828254796495524171577094572223476165660489865841346988625445071171405842265265530799511677189871529415645521268227954232104352940905477108554895252597918101669866566648894127228442849927256638205488018905303060062328513178881705079783281574173064830622301307478858316574660817343931889230380904815920650107529417496917625539508421445951434565268680368947443912849509842058260604493205634196267787539631977976264527692947006157338972404641973978594853543576394308034872570712741863678379665294736715997683345281344824678322742987094993852919511940336011361922050227553337934380716074541699531562364675246961627966318208288196286997278653517134533226479869105628143564268374239767624905518901543033781295858912968441511474247502611042397642361749714840751191548980975032734528877891415603928328358622423366521637536223820002589553256928842454788686330779315137105219740604510052803687924527098844882885607105300448760409737291674110717648513295526405311424499632809223681422990501565919454452172543699845920747802133257436602532622039056614950037999944886399023761073050870993090023120347734964800787701319938755062905482547436846989936036361743989606005546790825692723927674696463741932961639807070822383702708431251085319722154291612340603496079815143928138854180127161890431876336134446562073222590057819026448184087450051857571238302908298324022690858105185289098457047046670064887449303382833963085847824530081718379231772156950807807642750709398140822224744439639800008793276708681965072076830862645366297215466686602965531206354796446434644697453602135569206686664512792663546268038670270569186807672397800008936934447422228041893907057246708708059651277132973817180035428748580369338283303944788460076640740754890982581501858096220423892809203832175758150054780481844620918750095222370265644431633678134098161721081458831829341518970694306043216192451227913580152134807207383228070708936169239147364696476729327296528097645500606989347163630639989648634745284509260557839913107787008469437743021320090399078050370167320993688449999730059416650930226235206634752331208747029548996345271254454919565105099224186322908236994424113504625592315846717011476192737904067844003501706588288448890725429786308250015406047912501731513977033686887454248829652355985200028322635736125663324226853823829306514198778825437230579089845191157048417947163246793240116205742474115144869219858592187330345109815509426767932473862465341826501968974622335431715356872799682691882802813669726169642576463265135996145470617083439733355722050229163110633049115919258399490789247223876428443182543386799517637492566973876368147217075278430803493675345358495879379146404279833751600749296725462679779136935787762691436502394406062850248905948219344749863086862565434159544124805935526719694714925701056029518409083032988139343718066475613858874703103226038460371475182387970507188871315823260060303509810884502836652729948244822721498846665668966101819795252598455801774509049253401232459722862125546514925178981776115997035562562248504171170544526889643148568984066561674322275490775171425594697452828299178518606619303580315637917499479966941923793446159116014815926550359657827081527787744576092121721305996503449255657359180473649771929511175017823659299282950415743626889755250175624822957129245429890646530101799014255707074239715259693322298214318610929871212788935195080347374"};
		for(String numStr: numStrs) {
			System.out.println(findNextPalindrome(numStr));
		}
	}

	public static String findNextPalindrome(String numStr) {
      if(numStr.length()<3) return "";
      
      StringBuilder sb = new StringBuilder(numStr.substring(0, numStr.length()/2));
      int i=sb.length()-1;
      int pivotIndex = -1;
      // find first decreasing val from right
      while(i>0) {
        if(sb.charAt(i)>sb.charAt(i-1)) {
          pivotIndex = i-1;
          break;
        }
        i--;
      }
      
      // next large permutation not possible;
      if(pivotIndex<0) return "";
      
      // find greater number than pivot from the right to swap. (make sure to check i<=pivot, instead of i<pivot)
      i=sb.length()-1;
      while(sb.charAt(i)<=sb.charAt(pivotIndex)) {
        i--;
      }
      
      //swap the numbers
      swap(sb, pivotIndex, i);
      
      // revere rest of the number
      i = pivotIndex+1;
      int j = sb.length()-1;
      while(i<j) {
        swap(sb, i++, j--);
      }
      
      // form plindromic number
      i = sb.length()-1;
      while(i>=0) {
        sb.append(sb.charAt(i--));
      }
      
      // add middle number if numStr is odd length
      if(numStr.length()%2==1) {
        sb.insert(numStr.length()/2, numStr.charAt(numStr.length()/2));
      }
      
      // return new palindrome if it is greater than previous
     i = 0;
     boolean flag=false;
     while(i<numStr.length()) {
       if(sb.charAt(i)==numStr.charAt(i)) {
         i++;
       } else if(sb.charAt(i)<numStr.charAt(i)) {
         flag=false;
         break;
       } else {
         flag=true;
         break;
       }
     }
     if(flag) {
       return sb.toString();
     } else {
       return "";
     }
    }
    
    public static void swap(StringBuilder sb, int i, int j) {
      char temp = sb.charAt(i);
      sb.setCharAt(i, sb.charAt(j));
      sb.setCharAt(j, temp);
    }
}