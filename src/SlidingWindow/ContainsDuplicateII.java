import java.util.*;

class ContainsDuplicateII {
	public static void main(String args[]) {
		List<int[]> numList = new ArrayList<>();
		List<Integer> kList = new ArrayList<>();

		numList.add(new int[]{444, -666, -999, 888, -444, 666, -666, 999});
		kList.add(5);
		numList.add(new int[]{633,97,-396,-995,830,-730,-792,933,816,-172,-931,534,-427,-674,-822,-876,-194,-890,22,-22,657,848,186,529,-449,-634,963,-428,-516,762,-565,504,-697,204,540,-425,108,-231,-299,-420,-189,211,947,-915,853,532,-586,911,517,196,858,864,-266,-424,563,475,547,850,152,276,-5,-943,660,-898,-979,548,840,-232,239,532,314,906,264,-607,870,531,-535,-826,-863,407,-856,-228,768,-378,360,-290,-744,357,-146,-853,938,-653,166,-597,-902,-492,-647,203,-616,-256,-95,463,-753,-737,92,415,-634,39,564,-549,137,-960,-899,-53,73,198,334,893,405,-397,-38,-73,193,-974,858,784,659,569,-949,612,-533,-428,-550,-645,-116,308,-477,612,-886,-617,-147,-895,949,362,88,733,747,-523,643,416,-183,-891,356,632,722,-558,-980,100,-276,525,1000,-436,230,-492,243,590,552,-870,-627,509,213,585,725,-308,-178,-171,-439,-116,86,-498,-587,-29,772,-379,832,-782,-661,-520,-331,-343,139,-190,-360,740,420,506,-923,-96,-476,936,67,-102,366,-524,-359,-73,-919,360,-22,-726,471,-922,-4,704,-902,-905,504,661,-794,776,770,-985,-186,-838,285,-967,359,444,333,309,275,-952,-752,575,63,859,650,586,-775,203,6,-810,690,-809,922,-804,739,883,880,905,-816,964,979,-796,418,-479,-626,-564,-73,-664,-19,120,360,868,-848,-706,323,559,-18,-474,-327,-165,-932,784,-856,488,-830,210,-767,-481,-143,176,-325,906,-699,803,941,-267,27,-768,863,545,646,-918,-59,-869,-163,-221,903,668,-703,-43,731,472,-781,-341,-104,-32,-838,-509,384,-533,737,144,-23,-758,567,-231,688,-434,-899,73,-343,-180,617,658,627,-621,-743,313,-711,394,248,433,-763,848,97,-849,968,-119,519,-940,-985,-668,538,385,550,194,264,-697,-506,-526,626,363,114,-354,-882,586,-512,-153,8,-769,525,-61,-783,-815,136,154,-845,276,-355,372,63,-672,-584,-464,-631,-837,354,961,42,-900,-249,-671,-579,-996,610,-331,-387,-2,579,-601,-116,550,-364,-770,922,-593,369,-616,-166,404,-261,185,189,-965,-830,-22,-364,-908,-912,-949,697,-920,990,-476,-660,-605,669,-116,633,-738,-776,238,-213,-788,-570,-223,311,803,237,-525,-494,182,-649,-790,-334,107,-662,716,754,-939,641,926,-292,-695,-501,424,47,-101,-11,-207,-184,352,-400,-27,145,-488,638,-586,-290,-91,699,-964,374,-694,-434,-746,900,14,232,-34,440,151,-500,415,460,-435,-133,446,-24,0,348,926,-443,-895,601,-237,157,-863,954,945,955,-29,-92,251,-746,-143,762,672,700,-502,223,-355,272,-212,-838,573,-419,15,98,-433,-566,202,-299,-665,569,-564,-440,-899,766,-913,-112,-225,882,-560,984,-984,-317,-179,-457,780,710,448,-104,904,-917,-527,-319,-984,568,-877,188,463,533,273,592,-940,529,-735,-615,-272,624,-104,-944,793,-654,702,-210,536,-834,574,570,-829,303,743,994,673,55,878,766,174,578,-116,-587,211,-669,447,203,-295,-473,-855,-135,-769,516,619,-872,924,-200,-162,-695,-619,275,809,-483,48,65,305,-568,817,500,254,-405,-498,-551,-554,-556,998,513,-949,-540,559,-568,-351,-836,120,640,-313,-205,-936,170,765,-852,-622,936,812,-159,918,499,-451,838,-614,-63,-617,748,-416,-262,521,200,480,-34,892,-468,618,716,-909,269,-765,724,-921,-404,-326,483,-216,324,872,-832,-489,-73,-590,-983,-316,357,-862,803,283,-989,518,787,511,564,988,-754,-919,732,-222,107,966,-674,-855,90,-169,511,-469,-738,711,283,716,112,-639,180,-932,-921,-363,-412,976,920,-825,192,239,-39,-361,-43,642,510,-637,-769,-881,-220,-234,-389,-453,651,-977,699,393,-289,-87,327,-938,181,-859,-233,-37,-449,497,-134,259,-345,-685,982,-534,-783,509,747,207,-647,118,-13,143,-924,92,562,-33,84,-668,-835,-98,-691,-785,976,585,115,-851,117,-518,-212,-554,898,-783,768,806,-244,919,776,-287,666,633,-78,-590,-821,-337,900,888,-781,952,-165,429,-491,969,50,-132,744,-723,-293,365,661,-588,-749,349,-116,-421,171,-11,-275,850,67,55,-473,57,422,-222,-622,55,960,-907,108,-451,594,-743,-713,-378,640,-627,885,422,439,-339,-139,991,-372,775,-372,201,-559,755,833,-261,-790,-593,-244,-666,-155,526,66,-575,728,-80,960,-970,896,207,425,673,-814,729,786,-871,-66,-150,-484,-510,-24,-439,-164,999,-762,-775,-780,-306,-953,805,-498,-937,-753,-232,525,-555,-933,283,-175,-707,-916,-40,382,663,732,276,281,64,57,-947,-977,-528,434,404,506,617,387,192,285,319,838,188,-712,280,903,-765,-198,575,-595,-949,256,-590,-79,-62,-974,-811,-77,481,-533,-839,-402,810,470,-717,-565,-326,-314,-565,-295,994,35,-931,-239,168,0,-786,-923,-627,-411,893,-213,-241,470,-295,-922,-84,207,12,-942,-41,-422,122,-699,-645,-734,-539,-687,-314,-540,143,793,-545,-401,688,348,813,-938,-225,-695,860,-835,-599,272,-576,886,-837,106,-312,-297,303,-357,691,982,883,-601,477,210,176,486,258,-773,262,310,-677,922,-272,443,-431});
		kList.add(10000);

		for(int i=0; i<numList.size(); i++) {
			System.out.println(containsNearbyDuplicate(numList.get(i), kList.get(i)));
			// System.out.println(containsNearbyDuplicate_usingMap(numList.get(i), kList.get(i)));
		}
	}

	// Preferred approach.
	// Time Complexity O(n). Space Complexity O(min(n,k))
	public static boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new HashSet<>();
        
        for(int i=0; i<nums.length; i++) {
            if(set.contains(nums[i])) {
            	return true;
            }
            set.add(nums[i]);

            if(set.size()>k) {
            	set.remove(nums[i-k]);
            }
        }
        return false;
    }

    // Not a preferred approach.
    // Time Complexity O(n+m), where m is the average size list in hashmap. 
    // Space Complexity O(n), for storing elements in hashmap.
	public static boolean containsNearbyDuplicate_usingMap(int[] nums, int k) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0; i<nums.length; i++) {
            map.putIfAbsent(nums[i], new ArrayList<>());
            map.get(nums[i]).add(i);
        }
        
        for(Map.Entry<Integer, List<Integer>> entry: map.entrySet()) {
            if(entry.getValue().size()>1) {
                List<Integer> temp = entry.getValue();
                int minDiff = Integer.MAX_VALUE;
                for(int i=1; i<temp.size(); i++) {
                    minDiff = Math.min(minDiff, Math.abs(temp.get(i)-temp.get(i-1)));

                }
                if(minDiff<=k) {
                    return true;
                }
            }
        }
        return false;
    }
}